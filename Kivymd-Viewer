#!/usr/bin/python3 -B
from N4Tools.Design import (
   Color,
);import os,sys,getopt
class argvs:
    def __init__(self,argv):
        self.outputs = {}
        try:
            self.opts, args = getopt.getopt(argv,"hf:t:s:",["file=","theme=","size="])
        except getopt.GetoptError:
            self.help_msg()
        self.handle_argvs()

    def handle_argvs(self):
        if len(self.opts) == 0:
            self.help_msg()

        for opt,arg in self.opts:
            if opt == '-h':
                self.help_msg()
            elif opt in ('-f','--file'):
                if os.path.isfile(arg):
                    self.outputs['file'] = arg
                else:
                    print(f'Error : {arg}:not found...')
                    self.help_msg()

            elif opt in ('-t','--theme'):
                self.outputs['theme'] = arg
            elif opt in ('-s','--size'):
                try:
                    if len(arg.split(',')) == 2:
                        self.outputs['size'] = [int(i) for i in arg.split(',')]
                    else:
                        self.help_msg()
                except ValueError:
                    self.help_msg()
            else:
                self.help_msg()

        if not self.check():
            self.help_msg()

    def check(self):
        if 'file' in self.outputs:
            if 'size' not in self.outputs:
                self.outputs['size'] = (350,750)
            if 'theme' not in self.outputs:
                self.outputs['theme'] = 'Light'
            return True
        else:
            return False

    def help_msg(self):
        c = Color.reader
        command = c('WL#Simple-KivymdStudio RL#-f WL#<GL#main.kvWL#> RL#-t WL#<GL#themeWL#> RL#-s WL#<GL#ScreenSizeWL#> ##')
        print(command)

        print('\nhelp message:')
        print('  -f  --file   main.kv file e.g ( -f main.kv ).')
        print('  -t  --theme  The app theme e.g ( -t Dark ) or ( -t Light ).')
        print('  -s  --size   screen size e.g ( -s 400,1000 ).')

        print('\nexample:')
        print('  Simple-KivymdStudio -f main.kv -t Dark -s 500,900')
        sys.exit(2)

argv = argvs(sys.argv[1:])
sys.path.append(os.getcwd())

from kivy.config import Config
Config.set('graphics', 'width', '350')
Config.set('graphics', 'height', '750')
Config.set('graphics', 'rotation','0')
Config.set('graphics', 'fullscreen', '0')
Config.write()

from kivy.core.window import Window
Window.size = argv.outputs['size']

from kivy.lang import Builder
from kivymd.app import MDApp
from kivy.clock import Clock, mainthread
from kivy.lang import Builder
from kivy.properties import BooleanProperty, ListProperty, StringProperty
from kivy.uix.scrollview import ScrollView
from watchdog.events import FileSystemEventHandler
from watchdog.observers import Observer

from kivymd.theming import ThemableBehavior
from kivymd.uix.boxlayout import MDBoxLayout

Builder.load_string(
    """
<HotReloadErrorText>
    MDLabel:
        size_hint_y: None
        height: self.texture_size[1]
        theme_text_color: "Custom"
        text_color:
            root.errors_text_color if root.errors_text_color \
            else root.theme_cls.text_color
        text: root.text
"""
)


class HotReloadErrorText(ThemableBehavior, ScrollView):
    text = StringProperty()
    """Text errors.
    :attr:`text` is an :class:`~kivy.properties.StringProperty`
    and defaults to `''`.
    """

    errors_text_color = ListProperty()
    """
    Error text color.
    :attr:`errors_text_color` is an :class:`~kivy.properties.ListProperty`
    and defaults to `[]`.
    """


class HotReloadHandler(FileSystemEventHandler):
    def __init__(self, callback, target, **kwargs):
        super().__init__(**kwargs)
        self.callback = callback
        self.target = target

    def on_any_event(self, event):
        self.callback()


class HotReloadViewer(ThemableBehavior, MDBoxLayout):
    """
    :Events:
        :attr:`on_error`
            Called when an error occurs in the KV-file that the user is editing.
    """

    path = StringProperty()
    """Path to KV file.
    :attr:`path` is an :class:`~kivy.properties.StringProperty`
    and defaults to `''`.
    """

    errors = BooleanProperty(False)
    """
    Show errors while editing KV-file.
    :attr:`errors` is an :class:`~kivy.properties.BooleanProperty`
    and defaults to `False`.
    """

    errors_background_color = ListProperty()
    """
    Error background color.
    :attr:`errors_background_color` is an :class:`~kivy.properties.ListProperty`
    and defaults to `[]`.
    """

    errors_text_color = ListProperty()
    """
    Error text color.
    :attr:`errors_text_color` is an :class:`~kivy.properties.ListProperty`
    and defaults to `[]`.
    """

    _temp_widget = None

    def __init__(self, **kwargs):
        self.observer = Observer()
        self.error_text = HotReloadErrorText()
        super().__init__(**kwargs)
        self.register_event_type("on_error")

    @mainthread
    def update(self, *args):
        """Updates and displays the KV-file that the user edits."""

        Builder.unload_file(self.path)
        self.clear_widgets()
        try:
            self.padding = (0, 0, 0, 0)
            self.md_bg_color = (0, 0, 0, 0)
            self._temp_widget = Builder.load_file(self.path)
            self.add_widget(self._temp_widget)
        except Exception as error:
            self.show_error(error)
            self.dispatch("on_error", error)

    def show_error(self, error):
        """Displays text with a current error."""

        if self._temp_widget and not self.errors:
            self.add_widget(self._temp_widget)
            return
        else:
            if self.errors_background_color:
                self.md_bg_color = self.errors_background_color
            self.padding = ("4dp", "4dp", "4dp", "4dp")
            self.error_text.text = (
                error.message
                if getattr(error, r"message", None)
                else str(error)
            )
            self.add_widget(self.error_text)

    def on_error(self, *args):
        """
        Called when an error occurs in the KV-file that the user is editing.
        """

    def on_errors_text_color(self, instance, value):
        self.error_text.errors_text_color = value

    def on_path(self, instance, value):
        self.observer.schedule(
            HotReloadHandler(self.update, value), os.path.split(value)[0]
        )
        self.observer.start()
        Clock.schedule_once(self.update, 1)

KV = '''
<HotReloadViewer>
BoxLayout:
    HotReloadViewer:
        path: app.path_to_kv_file
        errors: True
        errors_text_color: .8,0,0,1
        errors_background_color: app.theme_cls.bg_dark
'''

class Simple_KivymdStudio(MDApp):
    path_to_kv_file = os.path.join(os.getcwd(),argv.outputs['file'])

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.theme_cls.theme_style = argv.outputs['theme']

    def build(self):
        return Builder.load_string(KV)

if __name__=='__main__':
    app = Simple_KivymdStudio()
    app.run()
